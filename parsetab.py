
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftNOTnonassocEQUALLESS_THANLESS_THAN_OR_EQUALleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTACTION ASSIGN AT BLOCK_END BLOCK_INIT BOOL CASE CLASS COLON COMMA DIVIDE DOT ELSE EQUAL ESAC FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LESS_THAN LESS_THAN_OR_EQUAL LET LOOP MINUS MULTIPLY NEW NOT OF PARENTESIS_END PARENTESIS_INIT PLUS POOL SELF SEMICOLON STRING THEN TYPE WHILEprogram : classesclasses : class\n               | class classesclass : CLASS TYPE inheritance BLOCK_INIT features_opt BLOCK_END SEMICOLONinheritance : INHERITS TYPE\n                   | emptyfeatures_opt : features\n                    | emptyfeatures : feature\n                | feature featuresfeature : ID PARENTESIS_INIT formals_opt PARENTESIS_END COLON TYPE BLOCK_INIT expr BLOCK_END SEMICOLON\n               | attr_def SEMICOLONattr_defs : attr_def\n                 | attr_def COMMA attr_defsattr_def : ID COLON TYPE assign_optassign_opt : assign\n                  | emptyassign : ASSIGN exprformals_opt : formals\n                   | emptyformals : formal\n               | formal COMMA formalsformal : ID COLON TYPEparams_opt : params\n                  | emptyparams : expr\n              | expr COMMA paramsblock : blockelementsblockelements : expr SEMICOLON\n                     | expr SEMICOLON blockelementstypeactions : typeaction\n                   | typeaction typeactionstypeaction : ID COLON TYPE ACTION expr SEMICOLONfunction_call : ID PARENTESIS_INIT params_opt PARENTESIS_ENDtargettype_opt : targettype\n                      | emptytargettype : AT TYPEexpr  : SELFexpr : ID assign\n            | expr targettype_opt DOT function_call\n            | function_call\n            | IF expr THEN expr ELSE expr FI\n            | WHILE expr LOOP expr POOL\n            | LET attr_defs IN expr\n            | CASE expr OF typeactions ESAC\n            | NEW TYPE\n            | INT_COMP expr\n            | NOT expr\n            | ISVOID expr\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr MULTIPLY expr\n            | expr DIVIDE expr\n            | expr LESS_THAN expr\n            | expr LESS_THAN_OR_EQUAL expr\n            | expr EQUAL expr\n            | BLOCK_INIT block BLOCK_END\n            | PARENTESIS_INIT expr PARENTESIS_END\n            | ID\n            | INTEGER\n            | STRING\n            | BOOL\n    empty :'
    
_lr_action_items = {'CLASS':([0,3,23,],[4,4,-4,]),'$end':([1,2,3,5,23,],[0,-1,-2,-3,-4,]),'TYPE':([4,8,21,30,38,48,68,126,],[6,11,29,37,57,77,94,129,]),'INHERITS':([6,],[8,]),'BLOCK_INIT':([6,7,9,11,36,44,45,47,49,50,51,52,53,57,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[-63,10,-6,-5,52,52,52,52,52,52,52,52,52,85,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'BLOCK_END':([10,12,13,14,15,19,22,40,41,42,43,54,55,56,69,77,78,79,80,81,82,87,88,89,90,91,92,93,104,105,106,107,108,110,114,119,123,124,127,130,],[-63,18,-7,-8,-9,-10,-12,-18,-38,-59,-41,-60,-61,-62,-39,-46,-47,-48,-49,104,-28,-50,-51,-52,-53,-54,-55,-56,-57,-29,-58,120,-40,-34,-44,-30,-43,-45,-11,-42,]),'ID':([10,15,20,22,32,36,44,45,46,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,86,99,100,101,102,103,105,111,117,122,127,131,133,],[16,16,24,-12,24,42,42,42,75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,109,42,42,42,75,118,42,42,118,42,-11,42,-33,]),'PARENTESIS_INIT':([16,36,42,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,109,111,122,131,],[20,53,70,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,70,53,53,53,]),'COLON':([16,24,31,75,118,],[21,30,38,21,126,]),'SEMICOLON':([17,18,29,33,34,35,40,41,42,43,54,55,56,69,77,78,79,80,83,87,88,89,90,91,92,93,104,106,108,110,114,120,123,124,130,132,],[22,23,-63,-15,-16,-17,-18,-38,-59,-41,-60,-61,-62,-39,-46,-47,-48,-49,105,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,127,-43,-45,-42,133,]),'PARENTESIS_END':([20,25,26,27,28,37,39,40,41,42,43,54,55,56,69,70,77,78,79,80,84,87,88,89,90,91,92,93,95,96,97,98,104,106,108,110,114,121,123,124,130,],[-63,31,-19,-20,-21,-23,-22,-18,-38,-59,-41,-60,-61,-62,-39,-63,-46,-47,-48,-49,106,-50,-51,-52,-53,-54,-55,-56,110,-24,-25,-26,-57,-58,-40,-34,-44,-27,-43,-45,-42,]),'COMMA':([28,29,33,34,35,37,40,41,42,43,54,55,56,69,74,77,78,79,80,87,88,89,90,91,92,93,98,104,106,108,110,114,123,124,130,],[32,-63,-15,-16,-17,-23,-18,-38,-59,-41,-60,-61,-62,-39,102,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,111,-57,-58,-40,-34,-44,-43,-45,-42,]),'ASSIGN':([29,42,],[36,36,]),'IN':([29,33,34,35,40,41,42,43,54,55,56,69,73,74,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,114,115,123,124,130,],[-63,-15,-16,-17,-18,-38,-59,-41,-60,-61,-62,-39,101,-13,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,-14,-43,-45,-42,]),'SELF':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'IF':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'WHILE':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LET':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CASE':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'NEW':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'INT_COMP':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'NOT':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ISVOID':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'INTEGER':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'STRING':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'BOOL':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'PLUS':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[59,-38,-59,-41,-60,-61,-62,-39,59,59,59,-46,-47,59,-49,59,59,-50,-51,-52,-53,59,59,59,59,-57,-58,59,-40,-34,59,59,59,-43,-45,59,-42,59,]),'MINUS':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[60,-38,-59,-41,-60,-61,-62,-39,60,60,60,-46,-47,60,-49,60,60,-50,-51,-52,-53,60,60,60,60,-57,-58,60,-40,-34,60,60,60,-43,-45,60,-42,60,]),'MULTIPLY':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[61,-38,-59,-41,-60,-61,-62,-39,61,61,61,-46,-47,61,-49,61,61,61,61,-52,-53,61,61,61,61,-57,-58,61,-40,-34,61,61,61,-43,-45,61,-42,61,]),'DIVIDE':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[62,-38,-59,-41,-60,-61,-62,-39,62,62,62,-46,-47,62,-49,62,62,62,62,-52,-53,62,62,62,62,-57,-58,62,-40,-34,62,62,62,-43,-45,62,-42,62,]),'LESS_THAN':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[63,-38,-59,-41,-60,-61,-62,-39,63,63,63,-46,-47,63,-49,63,63,-50,-51,-52,-53,None,None,None,63,-57,-58,63,-40,-34,63,63,63,-43,-45,63,-42,63,]),'LESS_THAN_OR_EQUAL':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[64,-38,-59,-41,-60,-61,-62,-39,64,64,64,-46,-47,64,-49,64,64,-50,-51,-52,-53,None,None,None,64,-57,-58,64,-40,-34,64,64,64,-43,-45,64,-42,64,]),'EQUAL':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[65,-38,-59,-41,-60,-61,-62,-39,65,65,65,-46,-47,65,-49,65,65,-50,-51,-52,-53,None,None,None,65,-57,-58,65,-40,-34,65,65,65,-43,-45,65,-42,65,]),'AT':([40,41,42,43,54,55,56,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[68,-38,-59,-41,-60,-61,-62,-39,68,68,68,-46,68,68,68,68,68,68,68,68,68,68,68,68,68,-57,-58,68,-40,-34,68,68,68,-43,-45,68,-42,68,]),'DOT':([40,41,42,43,54,55,56,58,66,67,69,71,72,76,77,78,79,80,83,84,87,88,89,90,91,92,93,94,98,104,106,107,108,110,112,113,114,123,124,128,130,132,],[-18,-38,-59,-41,-60,-61,-62,86,-35,-36,-39,-63,-63,-63,-46,-47,-48,-49,-63,-63,-50,-51,-52,-53,-54,-55,-56,-37,-63,-57,-58,-63,-40,-34,-63,-63,-44,-43,-45,-63,-42,-63,]),'THEN':([40,41,42,43,54,55,56,69,71,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,114,123,124,130,],[-18,-38,-59,-41,-60,-61,-62,-39,99,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,-43,-45,-42,]),'LOOP':([40,41,42,43,54,55,56,69,72,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,114,123,124,130,],[-18,-38,-59,-41,-60,-61,-62,-39,100,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,-43,-45,-42,]),'OF':([40,41,42,43,54,55,56,69,76,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,114,123,124,130,],[-18,-38,-59,-41,-60,-61,-62,-39,103,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,-43,-45,-42,]),'ELSE':([40,41,42,43,54,55,56,69,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,112,114,123,124,130,],[-18,-38,-59,-41,-60,-61,-62,-39,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,122,-44,-43,-45,-42,]),'POOL':([40,41,42,43,54,55,56,69,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,113,114,123,124,130,],[-18,-38,-59,-41,-60,-61,-62,-39,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,123,-44,-43,-45,-42,]),'FI':([40,41,42,43,54,55,56,69,77,78,79,80,87,88,89,90,91,92,93,104,106,108,110,114,123,124,128,130,],[-18,-38,-59,-41,-60,-61,-62,-39,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-40,-34,-44,-43,-45,130,-42,]),'ESAC':([116,117,125,133,],[124,-31,-32,-33,]),'ACTION':([129,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classes':([0,3,],[2,5,]),'class':([0,3,],[3,3,]),'inheritance':([6,],[7,]),'empty':([6,10,20,29,40,70,71,72,76,78,79,80,83,84,87,88,89,90,91,92,93,98,107,112,113,114,128,132,],[9,14,27,35,67,97,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'features_opt':([10,],[12,]),'features':([10,15,],[13,19,]),'feature':([10,15,],[15,15,]),'attr_def':([10,15,46,102,],[17,17,74,74,]),'formals_opt':([20,],[25,]),'formals':([20,32,],[26,39,]),'formal':([20,32,],[28,28,]),'assign_opt':([29,],[33,]),'assign':([29,42,],[34,69,]),'expr':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,99,100,101,105,111,122,131,],[40,71,72,76,78,79,80,83,84,87,88,89,90,91,92,93,98,107,112,113,114,83,98,128,132,]),'function_call':([36,44,45,47,49,50,51,52,53,59,60,61,62,63,64,65,70,85,86,99,100,101,105,111,122,131,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,108,43,43,43,43,43,43,43,]),'targettype_opt':([40,71,72,76,78,79,80,83,84,87,88,89,90,91,92,93,98,107,112,113,114,128,132,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'targettype':([40,71,72,76,78,79,80,83,84,87,88,89,90,91,92,93,98,107,112,113,114,128,132,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'attr_defs':([46,102,],[73,115,]),'block':([52,],[81,]),'blockelements':([52,105,],[82,119,]),'params_opt':([70,],[95,]),'params':([70,111,],[96,121,]),'typeactions':([103,117,],[116,125,]),'typeaction':([103,117,],[117,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes','program',1,'p_program','parser.py',40),
  ('classes -> class','classes',1,'p_classes','parser.py',44),
  ('classes -> class classes','classes',2,'p_classes','parser.py',45),
  ('class -> CLASS TYPE inheritance BLOCK_INIT features_opt BLOCK_END SEMICOLON','class',7,'p_class','parser.py',54),
  ('inheritance -> INHERITS TYPE','inheritance',2,'p_inheritance','parser.py',59),
  ('inheritance -> empty','inheritance',1,'p_inheritance','parser.py',60),
  ('features_opt -> features','features_opt',1,'p_features_opt','parser.py',70),
  ('features_opt -> empty','features_opt',1,'p_features_opt','parser.py',71),
  ('features -> feature','features',1,'p_features','parser.py',78),
  ('features -> feature features','features',2,'p_features','parser.py',79),
  ('feature -> ID PARENTESIS_INIT formals_opt PARENTESIS_END COLON TYPE BLOCK_INIT expr BLOCK_END SEMICOLON','feature',10,'p_feature','parser.py',88),
  ('feature -> attr_def SEMICOLON','feature',2,'p_feature','parser.py',89),
  ('attr_defs -> attr_def','attr_defs',1,'p_attr_defs','parser.py',98),
  ('attr_defs -> attr_def COMMA attr_defs','attr_defs',3,'p_attr_defs','parser.py',99),
  ('attr_def -> ID COLON TYPE assign_opt','attr_def',4,'p_attr_def','parser.py',108),
  ('assign_opt -> assign','assign_opt',1,'p_assign_opt','parser.py',112),
  ('assign_opt -> empty','assign_opt',1,'p_assign_opt','parser.py',113),
  ('assign -> ASSIGN expr','assign',2,'p_assign','parser.py',117),
  ('formals_opt -> formals','formals_opt',1,'p_formals_opt','parser.py',121),
  ('formals_opt -> empty','formals_opt',1,'p_formals_opt','parser.py',122),
  ('formals -> formal','formals',1,'p_formals','parser.py',129),
  ('formals -> formal COMMA formals','formals',3,'p_formals','parser.py',130),
  ('formal -> ID COLON TYPE','formal',3,'p_formal','parser.py',139),
  ('params_opt -> params','params_opt',1,'p_params_opt','parser.py',143),
  ('params_opt -> empty','params_opt',1,'p_params_opt','parser.py',144),
  ('params -> expr','params',1,'p_params','parser.py',151),
  ('params -> expr COMMA params','params',3,'p_params','parser.py',152),
  ('block -> blockelements','block',1,'p_block','parser.py',161),
  ('blockelements -> expr SEMICOLON','blockelements',2,'p_blockelements','parser.py',165),
  ('blockelements -> expr SEMICOLON blockelements','blockelements',3,'p_blockelements','parser.py',166),
  ('typeactions -> typeaction','typeactions',1,'p_typeactions','parser.py',175),
  ('typeactions -> typeaction typeactions','typeactions',2,'p_typeactions','parser.py',176),
  ('typeaction -> ID COLON TYPE ACTION expr SEMICOLON','typeaction',6,'p_typeaction','parser.py',185),
  ('function_call -> ID PARENTESIS_INIT params_opt PARENTESIS_END','function_call',4,'p_function_call','parser.py',189),
  ('targettype_opt -> targettype','targettype_opt',1,'p_targettype_opt','parser.py',194),
  ('targettype_opt -> empty','targettype_opt',1,'p_targettype_opt','parser.py',195),
  ('targettype -> AT TYPE','targettype',2,'p_targettype','parser.py',199),
  ('expr -> SELF','expr',1,'p_expr_self','parser.py',203),
  ('expr -> ID assign','expr',2,'p_expr','parser.py',207),
  ('expr -> expr targettype_opt DOT function_call','expr',4,'p_expr','parser.py',208),
  ('expr -> function_call','expr',1,'p_expr','parser.py',209),
  ('expr -> IF expr THEN expr ELSE expr FI','expr',7,'p_expr','parser.py',210),
  ('expr -> WHILE expr LOOP expr POOL','expr',5,'p_expr','parser.py',211),
  ('expr -> LET attr_defs IN expr','expr',4,'p_expr','parser.py',212),
  ('expr -> CASE expr OF typeactions ESAC','expr',5,'p_expr','parser.py',213),
  ('expr -> NEW TYPE','expr',2,'p_expr','parser.py',214),
  ('expr -> INT_COMP expr','expr',2,'p_expr','parser.py',215),
  ('expr -> NOT expr','expr',2,'p_expr','parser.py',216),
  ('expr -> ISVOID expr','expr',2,'p_expr','parser.py',217),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',218),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',219),
  ('expr -> expr MULTIPLY expr','expr',3,'p_expr','parser.py',220),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',221),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','parser.py',222),
  ('expr -> expr LESS_THAN_OR_EQUAL expr','expr',3,'p_expr','parser.py',223),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','parser.py',224),
  ('expr -> BLOCK_INIT block BLOCK_END','expr',3,'p_expr','parser.py',225),
  ('expr -> PARENTESIS_INIT expr PARENTESIS_END','expr',3,'p_expr','parser.py',226),
  ('expr -> ID','expr',1,'p_expr','parser.py',227),
  ('expr -> INTEGER','expr',1,'p_expr','parser.py',228),
  ('expr -> STRING','expr',1,'p_expr','parser.py',229),
  ('expr -> BOOL','expr',1,'p_expr','parser.py',230),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',267),
]
